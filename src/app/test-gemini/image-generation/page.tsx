"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";

export default function TestGeminiImageGeneration() {
  const [prompt, setPrompt] = useState("A futuristic city with flying cars and tall skyscrapers in a sunset");
  const [generatedImage, setGeneratedImage] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState("");

  const generateImage = async () => {
    setIsLoading(true);
    setError("");
    setGeneratedImage("");
    
    try {
      const res = await fetch("/api/test-gemini/image-generation", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ prompt }),
      });

      if (!res.ok) {
        const errorText = await res.text();
        throw new Error(errorText);
      }

      const data = await res.json();
      setGeneratedImage(`data:${data.imageData.mimeType};base64,${data.imageData.data}`);
    } catch (err: any) {
      setError(`Error: ${err.message}`);
    } finally {
      setIsLoading(false);
    }
  };

  const clearImage = () => {
    setGeneratedImage("");
    setError("");
  };

  return (
    <div className="container max-w-3xl py-10">
      <Card>
        <CardHeader>
          <CardTitle>Test Gemini Image Generation</CardTitle>
          <p className="text-sm text-gray-500">
            Test the gemini-2.0-flash-preview-image-generation model for generating images from text prompts
          </p>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="bg-blue-50 p-4 rounded-md">
            <h3 className="font-medium text-blue-800">Model Information</h3>
            <ul className="text-sm text-blue-700 mt-2 space-y-1">
              <li><strong>Model:</strong> gemini-2.0-flash-preview-image-generation</li>
              <li><strong>Provider:</strong> Google AI (via @google/generative-ai)</li>
              <li><strong>Description:</strong> Generates images based on text prompts</li>
            </ul>
          </div>
          
          <div className="space-y-2">
            <label htmlFor="prompt" className="text-sm font-medium">Image Generation Prompt</label>
            <Textarea
              id="prompt"
              placeholder="Describe the image you want to generate..."
              value={prompt}
              onChange={(e) => setPrompt(e.target.value)}
              className="min-h-24"
            />
          </div>
          
          {error && (
            <div className="p-4 bg-red-50 text-red-700 rounded-md">
              {error}
            </div>
          )}
          
          {generatedImage && (
            <div className="space-y-2">
              <h3 className="text-sm font-medium">Generated Image:</h3>
              <div className="p-4 bg-gray-50 rounded-md flex justify-center">
                <img 
                  src={generatedImage} 
                  alt="Generated by Gemini" 
                  className="max-w-full max-h-96 object-contain"
                />
              </div>
            </div>
          )}
        </CardContent>
        <CardFooter className="flex justify-between flex-wrap gap-2">
          <div className="flex gap-2">
            <Button 
              onClick={generateImage} 
              disabled={isLoading || !prompt.trim()}
            >
              {isLoading ? "Generating..." : "Generate Image"}
            </Button>
            <Button 
              variant="outline" 
              onClick={clearImage}
              disabled={isLoading || (!generatedImage && !error)}
            >
              Clear Image
            </Button>
          </div>
          <Button 
            variant="secondary"
            onClick={() => setPrompt("A futuristic city with flying cars and tall skyscrapers in a sunset")}
            disabled={isLoading}
          >
            Load Sample Prompt
          </Button>
        </CardFooter>
      </Card>
    </div>
  );
}